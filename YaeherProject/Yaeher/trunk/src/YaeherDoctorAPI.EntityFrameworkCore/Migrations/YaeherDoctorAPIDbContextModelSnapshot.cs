// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YaeherDoctorAPI.EntityFrameworkCore;

namespace YaeherDoctorAPI.Migrations
{
    [DbContext(typeof(YaeherDoctorAPIDbContext))]
    partial class YaeherDoctorAPIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserLinkId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte>("Result");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsAbandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime");

                    b.Property<DateTime>("NextTryTime");

                    b.Property<byte>("Priority");

                    b.Property<short>("TryCount");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ChangeTime");

                    b.Property<byte>("ChangeType");

                    b.Property<long>("EntityChangeSetId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("ExtensionData");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("Reason")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("EntityChangeId");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("TenantNotificationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("Yaeher.AreaManage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.Property<string>("Postcode")
                        .HasMaxLength(20);

                    b.Property<string>("Remark")
                        .HasMaxLength(5000);

                    b.HasKey("Id");

                    b.ToTable("AreaManage");
                });

            modelBuilder.Entity("Yaeher.ArticleOperList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArticleID");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("OperType")
                        .HasMaxLength(20);

                    b.Property<string>("Type")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("ArticleOperList");
                });

            modelBuilder.Entity("Yaeher.AttachmentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConsultID");

                    b.Property<string>("ConsultJSon");

                    b.Property<string>("ConsultNumber")
                        .HasMaxLength(30);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("FileAddress")
                        .HasMaxLength(500);

                    b.Property<string>("FileContentAddress")
                        .HasMaxLength(500);

                    b.Property<string>("FileFrom")
                        .HasMaxLength(20);

                    b.Property<int>("FileOrder");

                    b.Property<double>("FileSize");

                    b.Property<double>("FileTotalTime");

                    b.Property<string>("FileType")
                        .HasMaxLength(10);

                    b.Property<string>("Filename")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<int>("ServiceID");

                    b.Property<string>("ServiceNumber")
                        .HasMaxLength(50);

                    b.Property<string>("TypeDetail")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AttachmentService");
                });

            modelBuilder.Entity("Yaeher.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("Yaeher.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLockoutEnabled");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsTwoFactorEnabled");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32);

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("Yaeher.ClinicDoctorReltion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClinicID");

                    b.Property<string>("ClinicJSON");

                    b.Property<string>("ClinicName")
                        .HasMaxLength(20);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorJSON");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.HasKey("Id");

                    b.ToTable("ClinicDoctorReltion");
                });

            modelBuilder.Entity("Yaeher.ClinicInfomation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClinicDirector");

                    b.Property<string>("ClinicIntro")
                        .HasMaxLength(100);

                    b.Property<string>("ClinicName")
                        .HasMaxLength(20);

                    b.Property<int>("ClinicType");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<int>("OrderSort");

                    b.HasKey("Id");

                    b.ToTable("ClinicInfomation");
                });

            modelBuilder.Entity("Yaeher.ClinicLableReltion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClinicID");

                    b.Property<string>("ClinicJSON");

                    b.Property<string>("ClinicName")
                        .HasMaxLength(20);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("LableID");

                    b.Property<string>("LableJSON");

                    b.Property<string>("LableName")
                        .HasMaxLength(20);

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.HasKey("Id");

                    b.ToTable("ClinicLableReltion");
                });

            modelBuilder.Entity("Yaeher.ConsultationEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConsultID");

                    b.Property<string>("ConsultNumber")
                        .HasMaxLength(30);

                    b.Property<int>("ConsultantID");

                    b.Property<string>("ConsultantName")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<string>("EvaluateContent")
                        .HasMaxLength(5000);

                    b.Property<string>("EvaluateLabel")
                        .HasMaxLength(100);

                    b.Property<int>("EvaluateLevel");

                    b.Property<string>("EvaluateReason");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsQuality");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<int>("PatientID");

                    b.Property<string>("PatientName")
                        .HasMaxLength(500);

                    b.Property<int>("QualityLevel");

                    b.Property<string>("QualityReason")
                        .HasMaxLength(5000);

                    b.Property<string>("SequenceNo")
                        .HasMaxLength(20);

                    b.Property<string>("StarTitle");

                    b.HasKey("Id");

                    b.ToTable("ConsultationEvaluation");
                });

            modelBuilder.Entity("Yaeher.ConsultationReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConsultID");

                    b.Property<string>("ConsultNumber")
                        .HasMaxLength(30);

                    b.Property<string>("ConsultType")
                        .HasMaxLength(20);

                    b.Property<int>("ConsultantID");

                    b.Property<string>("ConsultantName")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<string>("IllnessDescription")
                        .HasMaxLength(6000);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("PatientCity")
                        .HasMaxLength(200);

                    b.Property<int>("PatientID");

                    b.Property<string>("PatientName")
                        .HasMaxLength(500);

                    b.Property<string>("PatientTelephone")
                        .HasMaxLength(20);

                    b.Property<string>("RepayIllnessDescription")
                        .HasMaxLength(6000);

                    b.Property<string>("ReplyState")
                        .HasMaxLength(20);

                    b.Property<string>("ReplyType")
                        .HasMaxLength(10);

                    b.Property<string>("SequenceNo")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("ConsultationReply");
                });

            modelBuilder.Entity("Yaeher.CorporateIncomeDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConsultID");

                    b.Property<string>("ConsultNumber")
                        .HasMaxLength(30);

                    b.Property<int>("ConsultantID");

                    b.Property<string>("ConsultantName")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("OrderCurrency")
                        .HasMaxLength(20);

                    b.Property<decimal>("OrderMoney");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(20);

                    b.Property<int>("PatientID");

                    b.Property<string>("PatientName")
                        .HasMaxLength(500);

                    b.Property<decimal>("ProportionMoney");

                    b.HasKey("Id");

                    b.ToTable("CorporateIncomeDetails");
                });

            modelBuilder.Entity("Yaeher.CorporateIncomeTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<decimal>("IncomeTotal");

                    b.Property<string>("IncomeType")
                        .HasMaxLength(20);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<int>("OrderTotal");

                    b.Property<decimal>("OrderTotalMoney");

                    b.Property<decimal>("RefundTotalMoney");

                    b.Property<DateTime>("TotalDate");

                    b.HasKey("Id");

                    b.ToTable("CorporateIncomeTotal");
                });

            modelBuilder.Entity("Yaeher.Doctor.CollectConsultation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConsultID");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.HasKey("Id");

                    b.ToTable("CollectConsultation");
                });

            modelBuilder.Entity("Yaeher.Doctor.DoctorEmployment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("Department")
                        .HasMaxLength(20);

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("HospitalName")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("Title")
                        .HasMaxLength(20);

                    b.Property<int>("UserID");

                    b.Property<double>("WorkYear");

                    b.HasKey("Id");

                    b.ToTable("DoctorEmployment");
                });

            modelBuilder.Entity("Yaeher.DoctorCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CheckRemark")
                        .HasMaxLength(1000);

                    b.Property<string>("CheckState")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CheckTime");

                    b.Property<string>("CheckType")
                        .HasMaxLength(20);

                    b.Property<int>("Checker");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorJSon");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.HasKey("Id");

                    b.ToTable("DoctorCheck");
                });

            modelBuilder.Entity("Yaeher.DoctorClinicApply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplyRemark")
                        .HasMaxLength(2000);

                    b.Property<string>("ApplyType")
                        .HasMaxLength(10);

                    b.Property<string>("CheckRemark")
                        .HasMaxLength(1000);

                    b.Property<string>("CheckRes")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CheckTime");

                    b.Property<int>("ClinicID");

                    b.Property<string>("ClinicJSON");

                    b.Property<string>("ClinicName")
                        .HasMaxLength(20);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorJSON");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.HasKey("Id");

                    b.ToTable("DoctorClinicApply");
                });

            modelBuilder.Entity("Yaeher.DoctorFileApply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorClinicApplyId");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<string>("DocumentsUse")
                        .HasMaxLength(20);

                    b.Property<string>("FileType")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("TypeDetail")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("DoctorFileApply");
                });

            modelBuilder.Entity("Yaeher.DoctorIncome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<string>("IncomeTimeType")
                        .HasMaxLength(10);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<double>("Total");

                    b.Property<DateTime>("TotalDate");

                    b.HasKey("Id");

                    b.ToTable("DoctorIncome");
                });

            modelBuilder.Entity("Yaeher.DoctorOnlineRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CheckRemark");

                    b.Property<string>("CheckState")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CheckTime");

                    b.Property<int>("Checker");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<double>("DivideInto");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorJSON");

                    b.Property<double>("DoctorMoneyExchange");

                    b.Property<int>("DoctorMoneyexTime");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<int>("IncomeDay");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("OnlineState")
                        .HasMaxLength(10);

                    b.Property<string>("Remark")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("DoctorOnlineRecord");
                });

            modelBuilder.Entity("Yaeher.DoctorOnlineSetLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CheckRemark");

                    b.Property<string>("CheckState")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CheckTime");

                    b.Property<int>("Checker");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<double>("DivideInto");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorJSON");

                    b.Property<double>("DoctorMoneyExchange");

                    b.Property<int>("DoctorMoneyexTime");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<int>("IncomeDay");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("OnlineState")
                        .HasMaxLength(10);

                    b.Property<string>("Remark")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("DoctorOnlineSetLog");
                });

            modelBuilder.Entity("Yaeher.DoctorPaper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CheckRemark")
                        .HasMaxLength(2000);

                    b.Property<string>("CheckState")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CheckTime");

                    b.Property<int>("Checker");

                    b.Property<int>("ConsultID");

                    b.Property<string>("ConsultNumber")
                        .HasMaxLength(30);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<string>("ImageFie")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("PaperAddress")
                        .HasMaxLength(200);

                    b.Property<string>("PaperContent");

                    b.Property<string>("PaperFrom")
                        .HasMaxLength(20);

                    b.Property<string>("PaperTiltle")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("DoctorPaper");
                });

            modelBuilder.Entity("Yaeher.DoctorParaSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("DoctorParaSetCode")
                        .HasMaxLength(50);

                    b.Property<string>("DoctorParaSetName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDelete");

                    b.Property<string>("ItemValue")
                        .HasMaxLength(100);

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.HasKey("Id");

                    b.ToTable("DoctorParaSet");
                });

            modelBuilder.Entity("Yaeher.DoctorRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("LableID");

                    b.Property<string>("LableJSON");

                    b.Property<string>("LableName")
                        .HasMaxLength(20);

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.HasKey("Id");

                    b.ToTable("DoctorRelation");
                });

            modelBuilder.Entity("Yaeher.DoctorRules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplyClinicID");

                    b.Property<string>("ApplyClinicName")
                        .HasMaxLength(5000);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("ImageFie")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("RulesContent")
                        .HasMaxLength(5000);

                    b.Property<string>("RulesTitle")
                        .HasMaxLength(100);

                    b.Property<string>("RulesType")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("DoctorRules");
                });

            modelBuilder.Entity("Yaeher.DoctorScheduling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClinicIDAdd")
                        .HasMaxLength(200);

                    b.Property<string>("ClinicType")
                        .HasMaxLength(2000);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorJSON");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<string>("Duplication")
                        .HasMaxLength(2000);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<decimal>("RegistrationFee");

                    b.Property<DateTime>("SchedulingDate");

                    b.Property<string>("SchedulingTime")
                        .HasMaxLength(1000);

                    b.Property<bool>("ServiceState");

                    b.HasKey("Id");

                    b.ToTable("DoctorScheduling");
                });

            modelBuilder.Entity("Yaeher.DoctorServiceLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<int>("ServiceDuration");

                    b.Property<double>("ServiceExpense");

                    b.Property<int>("ServiceFrequency");

                    b.Property<DateTime>("ServiceTime");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("DoctorServiceLog");
                });

            modelBuilder.Entity("Yaeher.DoctorWithdrawRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CheckRemark")
                        .HasMaxLength(2000);

                    b.Property<string>("CheckState")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CheckTime");

                    b.Property<int>("Checker");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorJSON");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("SequenceNo")
                        .HasMaxLength(20);

                    b.Property<decimal>("WithdrawMoney");

                    b.Property<DateTime>("WithdrawTime");

                    b.HasKey("Id");

                    b.ToTable("DoctorWithdrawRecord");
                });

            modelBuilder.Entity("Yaeher.EventEntitys.Publishs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusinessCode")
                        .HasMaxLength(20);

                    b.Property<string>("BusinessID")
                        .HasMaxLength(20);

                    b.Property<string>("BusinessJSON");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("EventCode")
                        .HasMaxLength(200);

                    b.Property<string>("EventName")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDelete");

                    b.Property<string>("MessageRemark")
                        .HasMaxLength(5000);

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("OperationType")
                        .HasMaxLength(200);

                    b.Property<bool>("PublishStatus");

                    b.Property<string>("PublishUrl")
                        .HasMaxLength(200);

                    b.Property<DateTime>("PublishedTime");

                    b.Property<string>("Publisher")
                        .HasMaxLength(200);

                    b.Property<string>("ServerClient")
                        .HasMaxLength(20);

                    b.Property<string>("TemplateCode")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Publishs");
                });

            modelBuilder.Entity("Yaeher.EventEntitys.ReceiveEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<int>("PublishId");

                    b.Property<DateTime>("ReceptionDate");

                    b.Property<string>("ReceptionMessage")
                        .HasMaxLength(1000);

                    b.Property<int>("SubscribeID");

                    b.HasKey("Id");

                    b.ToTable("ReceiveEvent");
                });

            modelBuilder.Entity("Yaeher.EventEntitys.Subscribe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ActionStatus");

                    b.Property<string>("CallbackUrl")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("EventCode")
                        .HasMaxLength(100);

                    b.Property<string>("EventName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<DateTime>("RegisterTime");

                    b.Property<string>("ServerClient")
                        .HasMaxLength(10);

                    b.Property<string>("Subscriber")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Subscribe");
                });

            modelBuilder.Entity("Yaeher.EventEntitys.Subscribetion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusinessCode")
                        .HasMaxLength(50);

                    b.Property<string>("BusinessID")
                        .HasMaxLength(10);

                    b.Property<string>("BusinessJSON");

                    b.Property<string>("CallbackUrl")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("EventCode")
                        .HasMaxLength(50);

                    b.Property<string>("EventName")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ExecuteDate");

                    b.Property<bool>("ExecuteStatus");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<DateTime>("PublishedTime");

                    b.Property<string>("Subscriber")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Subscribetion");
                });

            modelBuilder.Entity("Yaeher.HangFire.HangFireJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusinessCode")
                        .HasMaxLength(20);

                    b.Property<int>("BusinessID");

                    b.Property<string>("CallbackUrl")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("JobCode")
                        .HasMaxLength(50);

                    b.Property<string>("JobName")
                        .HasMaxLength(50);

                    b.Property<string>("JobParameter");

                    b.Property<string>("JobRunID")
                        .HasMaxLength(100);

                    b.Property<DateTime>("JobRunTime");

                    b.Property<string>("JobSates")
                        .HasMaxLength(20);

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.HasKey("Id");

                    b.ToTable("HangFireJob");
                });

            modelBuilder.Entity("Yaeher.IncomeDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConsultID");

                    b.Property<string>("ConsultJSON");

                    b.Property<string>("ConsultNumber")
                        .HasMaxLength(30);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("OrderCurrency")
                        .HasMaxLength(10);

                    b.Property<double>("OrderMoney");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(20);

                    b.Property<double>("ProportionMoney");

                    b.Property<DateTime>("TotalDate");

                    b.HasKey("Id");

                    b.ToTable("IncomeDetails");
                });

            modelBuilder.Entity("Yaeher.IncomeDevide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConsultID");

                    b.Property<string>("ConsultNumber")
                        .HasMaxLength(30);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<decimal>("DevideMoney");

                    b.Property<double>("DevideRatio");

                    b.Property<DateTime>("DevideTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("OrderCurrency")
                        .HasMaxLength(20);

                    b.Property<int>("OrderID");

                    b.Property<decimal>("OrderMoney");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(20);

                    b.Property<string>("WXSharing")
                        .HasMaxLength(20);

                    b.Property<string>("WXSharingJson");

                    b.HasKey("Id");

                    b.ToTable("IncomeDevide");
                });

            modelBuilder.Entity("Yaeher.InterfaceSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("InterfaceAddress")
                        .HasMaxLength(200);

                    b.Property<string>("InterfaceIntro")
                        .HasMaxLength(200);

                    b.Property<string>("InterfaceName")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.HasKey("Id");

                    b.ToTable("InterfaceSet");
                });

            modelBuilder.Entity("Yaeher.LableManage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("LableName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("LableRemark")
                        .HasMaxLength(100);

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<int>("OrderSort");

                    b.HasKey("Id");

                    b.ToTable("LableManage");
                });

            modelBuilder.Entity("Yaeher.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("Yaeher.NumericalStatement.ConsultationOrderTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("CompleteMoney");

                    b.Property<int>("CompleteTotal");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorJSON");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<double>("OrderTotal");

                    b.Property<double>("RefundMoney");

                    b.Property<int>("RefundTotal");

                    b.Property<double>("RevenueTotal");

                    b.Property<DateTime>("TotalDate");

                    b.Property<string>("TotalType")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("ConsultationOrderTotal");
                });

            modelBuilder.Entity("Yaeher.NumericalStatement.EvaluationTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AverageAnswer");

                    b.Property<double>("AverageEvaluate");

                    b.Property<int>("CompleteTotal");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorJSON");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<int>("EvaluateTotal");

                    b.Property<int>("FiveStar");

                    b.Property<int>("FourStar");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<int>("OneStar");

                    b.Property<int>("OrderTotal");

                    b.Property<int>("RefundTotal");

                    b.Property<double>("RevenueTotal");

                    b.Property<int>("ThreeStar");

                    b.Property<int>("TwoStar");

                    b.HasKey("Id");

                    b.ToTable("EvaluationTotal");
                });

            modelBuilder.Entity("Yaeher.OrderEarlyWarning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConsultID");

                    b.Property<string>("ConsultNumber")
                        .HasMaxLength(30);

                    b.Property<int>("ConsultantID");

                    b.Property<string>("ConsultantName")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<int>("OrderID");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(20);

                    b.Property<int>("PatientID");

                    b.Property<string>("PatientName")
                        .HasMaxLength(500);

                    b.Property<string>("RemindDescription")
                        .HasMaxLength(500);

                    b.Property<bool>("RemindState");

                    b.HasKey("Id");

                    b.ToTable("OrderEarlyWarning");
                });

            modelBuilder.Entity("Yaeher.OrderManage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConsultID");

                    b.Property<string>("ConsultNumber")
                        .HasMaxLength(30);

                    b.Property<string>("ConsultType")
                        .HasMaxLength(20);

                    b.Property<int>("ConsultantID");

                    b.Property<string>("ConsultantName")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("OrderCurrency")
                        .HasMaxLength(10);

                    b.Property<decimal>("OrderMoney");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(20);

                    b.Property<int>("PatientID");

                    b.Property<string>("PatientName")
                        .HasMaxLength(500);

                    b.Property<string>("ReceivablesNumber")
                        .HasMaxLength(20);

                    b.Property<string>("ReceivablesType")
                        .HasMaxLength(20);

                    b.Property<string>("SellerMoneyID")
                        .HasMaxLength(200);

                    b.Property<string>("SequenceNo")
                        .HasMaxLength(20);

                    b.Property<int>("ServiceID");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(200);

                    b.Property<string>("TradeType")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("OrderManage");
                });

            modelBuilder.Entity("Yaeher.OrderTimeoutReminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConsultID");

                    b.Property<string>("ConsultNumber")
                        .HasMaxLength(30);

                    b.Property<int>("ConsultantID");

                    b.Property<string>("ConsultantName")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<int>("OrderID");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(20);

                    b.Property<int>("PatientID");

                    b.Property<string>("PatientName")
                        .HasMaxLength(500);

                    b.Property<string>("RemindDescription")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("OrderTimeoutReminder");
                });

            modelBuilder.Entity("Yaeher.OrderTradeRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("OrderCurrency")
                        .HasMaxLength(10);

                    b.Property<int>("OrderID");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(20);

                    b.Property<DateTime>("PayAchiveTime");

                    b.Property<decimal>("PayMoney");

                    b.Property<string>("PaySerialNumber")
                        .HasMaxLength(100);

                    b.Property<string>("PayType")
                        .HasMaxLength(20);

                    b.Property<string>("PaymentSource")
                        .HasMaxLength(20);

                    b.Property<string>("PaymentSourceCode")
                        .HasMaxLength(20);

                    b.Property<string>("PaymentState")
                        .HasMaxLength(20);

                    b.Property<string>("SequenceNo")
                        .HasMaxLength(20);

                    b.Property<string>("TenpayNumber")
                        .HasMaxLength(50);

                    b.Property<string>("VoucherJSON");

                    b.Property<string>("VoucherNumber")
                        .HasMaxLength(50);

                    b.Property<string>("WXOrderQuery")
                        .HasMaxLength(5000);

                    b.Property<string>("WXPayBillno")
                        .HasMaxLength(200);

                    b.Property<string>("WXTransactionId")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("OrderTradeRecord");
                });

            modelBuilder.Entity("Yaeher.PhoneReplyRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CallDuration");

                    b.Property<string>("CallIntro")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CallTime");

                    b.Property<string>("Callee")
                        .HasMaxLength(20);

                    b.Property<string>("Caller")
                        .HasMaxLength(20);

                    b.Property<int>("ConsultID");

                    b.Property<string>("ConsultNumber")
                        .HasMaxLength(30);

                    b.Property<int>("ConsultantID");

                    b.Property<string>("ConsultantName")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsUpload");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<int>("PatientID");

                    b.Property<string>("PatientName")
                        .HasMaxLength(500);

                    b.Property<string>("RecordAddress")
                        .HasMaxLength(200);

                    b.Property<string>("SequenceNo")
                        .HasMaxLength(20);

                    b.Property<string>("StorageAddress")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("PhoneReplyRecord");
                });

            modelBuilder.Entity("Yaeher.QualityCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Accomplish")
                        .HasMaxLength(200);

                    b.Property<int>("ClinicID");

                    b.Property<string>("ClinicName")
                        .HasMaxLength(20);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("QualityState")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("QualityCommittee");
                });

            modelBuilder.Entity("Yaeher.QualityCommitteeRegister", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Accomplish")
                        .HasMaxLength(20);

                    b.Property<string>("ApplyRemark")
                        .HasMaxLength(1000);

                    b.Property<string>("ApplyState")
                        .HasMaxLength(20);

                    b.Property<string>("CheckRemark")
                        .HasMaxLength(1000);

                    b.Property<string>("CheckState")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CheckTime");

                    b.Property<int>("Checker");

                    b.Property<int>("ClinicID");

                    b.Property<string>("ClinicName")
                        .HasMaxLength(20);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.HasKey("Id");

                    b.ToTable("QualityCommitteeRegister");
                });

            modelBuilder.Entity("Yaeher.QualityControlManage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ConsultID");

                    b.Property<string>("ConsultNumber")
                        .HasMaxLength(30);

                    b.Property<string>("ConsultType")
                        .HasMaxLength(20);

                    b.Property<int>("ConsultantID");

                    b.Property<string>("ConsultantName")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<int>("QualityLevel");

                    b.Property<string>("QualityType")
                        .HasMaxLength(20);

                    b.Property<string>("RepayIllnessDescription")
                        .HasMaxLength(1000);

                    b.Property<string>("ReplyState")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("QualityControlManage");
                });

            modelBuilder.Entity("Yaeher.QuestionRelease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer")
                        .HasMaxLength(3000);

                    b.Property<string>("CheckRemark")
                        .HasMaxLength(1000);

                    b.Property<string>("CheckState")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CheckTime");

                    b.Property<int>("Checker");

                    b.Property<int>("CollectTotal");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("DescriptionTiltle")
                        .HasMaxLength(3000);

                    b.Property<int>("DoctorId");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<int>("ReadTotal");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<string>("TitleDetail")
                        .HasMaxLength(100);

                    b.Property<int>("TransTotal");

                    b.Property<int>("UpvoteTotal");

                    b.HasKey("Id");

                    b.ToTable("QuestionRelease");
                });

            modelBuilder.Entity("Yaeher.RefundManage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CheckRemark")
                        .HasMaxLength(1000);

                    b.Property<string>("CheckState")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CheckTime");

                    b.Property<int>("Checker");

                    b.Property<int>("ConsultID");

                    b.Property<string>("ConsultNumber")
                        .HasMaxLength(30);

                    b.Property<int>("ConsultantID");

                    b.Property<string>("ConsultantName")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("OrderCurrency")
                        .HasMaxLength(10);

                    b.Property<int>("OrderID");

                    b.Property<decimal>("OrderMoney");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(20);

                    b.Property<int>("PatientID");

                    b.Property<string>("PatientName")
                        .HasMaxLength(500);

                    b.Property<string>("RefundNumber")
                        .HasMaxLength(20);

                    b.Property<string>("RefundReason")
                        .HasMaxLength(1000);

                    b.Property<string>("RefundRemarks")
                        .HasMaxLength(1000);

                    b.Property<string>("SellerMoneyID")
                        .HasMaxLength(200);

                    b.Property<string>("SequenceNo")
                        .HasMaxLength(20);

                    b.Property<int>("ServiceID");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("RefundManage");
                });

            modelBuilder.Entity("Yaeher.ReleaseManage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CheckRemark")
                        .HasMaxLength(1000);

                    b.Property<string>("CheckState")
                        .HasMaxLength(20);

                    b.Property<DateTime>("CheckTime");

                    b.Property<int>("Checker");

                    b.Property<int>("CollectTotal");

                    b.Property<string>("ConsultNumber")
                        .HasMaxLength(30);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<int>("DoctorPaperID");

                    b.Property<string>("ImageFie")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("PaperAddress")
                        .HasMaxLength(200);

                    b.Property<string>("PaperContent");

                    b.Property<string>("PaperFrom")
                        .HasMaxLength(20);

                    b.Property<string>("PaperTiltle")
                        .HasMaxLength(200);

                    b.Property<int>("ReadTotal");

                    b.Property<int>("TransTotal");

                    b.Property<int>("UpvoteTotal");

                    b.HasKey("Id");

                    b.ToTable("ReleaseManage");
                });

            modelBuilder.Entity("Yaeher.ServiceMoneyList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActualNumber");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<int>("ServiceDuration");

                    b.Property<double>("ServiceExpense");

                    b.Property<int>("ServiceFrequency");

                    b.Property<bool>("ServiceState");

                    b.Property<DateTime>("ServiceTime");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(20);

                    b.Property<string>("ServiceTypeValue")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("ServiceMoneyList");
                });

            modelBuilder.Entity("Yaeher.SystemConfig.AcceptTencentWechar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .HasMaxLength(5000);

                    b.Property<string>("CreateTime")
                        .HasMaxLength(20);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("Format")
                        .HasMaxLength(100);

                    b.Property<string>("FromUserName")
                        .HasMaxLength(100);

                    b.Property<string>("FullName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Label")
                        .HasMaxLength(200);

                    b.Property<string>("Location_X")
                        .HasMaxLength(50);

                    b.Property<string>("Location_Y")
                        .HasMaxLength(50);

                    b.Property<string>("MediaId")
                        .HasMaxLength(100);

                    b.Property<string>("MessageFrom")
                        .HasMaxLength(200);

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("MsgId")
                        .HasMaxLength(200);

                    b.Property<string>("MsgType")
                        .HasMaxLength(50);

                    b.Property<string>("NickName")
                        .HasMaxLength(500);

                    b.Property<string>("PicUrl")
                        .HasMaxLength(300);

                    b.Property<string>("Recognition")
                        .HasMaxLength(3000);

                    b.Property<string>("Scale")
                        .HasMaxLength(500);

                    b.Property<string>("ThumbMediaId")
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .HasMaxLength(200);

                    b.Property<string>("ToUserName")
                        .HasMaxLength(100);

                    b.Property<string>("Url")
                        .HasMaxLength(500);

                    b.Property<string>("UserImage")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.ToTable("AcceptTencentWechar");
                });

            modelBuilder.Entity("Yaeher.SystemConfig.AcceptWecharState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AcceptState")
                        .HasMaxLength(5);

                    b.Property<DateTime>("AcceptTime");

                    b.Property<int>("ConsultantID");

                    b.Property<string>("ConsultantJSON");

                    b.Property<string>("ConsultantName")
                        .HasMaxLength(500);

                    b.Property<string>("ConsultantOpenID")
                        .HasMaxLength(100);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("CustomerServiceID");

                    b.Property<string>("CustomerServiceJson");

                    b.Property<string>("CustomerServiceName")
                        .HasMaxLength(50);

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsReady");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("NickName")
                        .HasMaxLength(500);

                    b.Property<string>("UserImage")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("AcceptWecharState");
                });

            modelBuilder.Entity("Yaeher.SystemConfig.CompanyConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConfigContent")
                        .HasMaxLength(2000);

                    b.Property<string>("ConfigImageUrl")
                        .HasMaxLength(100);

                    b.Property<string>("ConfigTitle")
                        .HasMaxLength(100);

                    b.Property<string>("ConfigType")
                        .HasMaxLength(10);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.HasKey("Id");

                    b.ToTable("CompanyConfig");
                });

            modelBuilder.Entity("Yaeher.SystemConfig.QuickReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .HasMaxLength(5000);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<string>("UseOf")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("QuickReply");
                });

            modelBuilder.Entity("Yaeher.SystemConfig.RecommendedOrdering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClinicID");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ItemSort");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.HasKey("Id");

                    b.ToTable("RecommendedOrdering");
                });

            modelBuilder.Entity("Yaeher.SystemConfig.RelationLabelGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDelete");

                    b.Property<string>("LableID")
                        .HasMaxLength(5000);

                    b.Property<string>("LableName")
                        .HasMaxLength(5000);

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.HasKey("Id");

                    b.ToTable("RelationLabelGroup");
                });

            modelBuilder.Entity("Yaeher.SystemConfig.RelationLabelList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BusinessID");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("LableID");

                    b.Property<string>("LableName")
                        .HasMaxLength(100);

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("RelationCode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("RelationLabelList");
                });

            modelBuilder.Entity("Yaeher.SystemConfig.SendMessageTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BackUrl")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("FirstMessage")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Keyword1")
                        .HasMaxLength(100);

                    b.Property<string>("Keyword2")
                        .HasMaxLength(100);

                    b.Property<string>("Keyword3")
                        .HasMaxLength(100);

                    b.Property<string>("MessageRemark")
                        .HasMaxLength(200);

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("OperationType")
                        .HasMaxLength(100);

                    b.Property<string>("Recipient")
                        .HasMaxLength(50);

                    b.Property<string>("TemplateCode")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("SendMessageTemplate");
                });

            modelBuilder.Entity("Yaeher.SystemConfig.SystemConfigs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessKeyID")
                        .HasMaxLength(500);

                    b.Property<string>("AccessSecret")
                        .HasMaxLength(500);

                    b.Property<string>("AppID")
                        .HasMaxLength(500);

                    b.Property<string>("AppKey")
                        .HasMaxLength(500);

                    b.Property<string>("AppSecret")
                        .HasMaxLength(500);

                    b.Property<string>("CallCenterNumber")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("RefreshTokenCode")
                        .HasMaxLength(500);

                    b.Property<string>("SystemName")
                        .HasMaxLength(500);

                    b.Property<string>("SystemType")
                        .HasMaxLength(100);

                    b.Property<string>("TenPayKey")
                        .HasMaxLength(500);

                    b.Property<string>("TenPayMchId")
                        .HasMaxLength(500);

                    b.Property<string>("TenPayNotify")
                        .HasMaxLength(500);

                    b.Property<bool>("TenPayProfitSharing");

                    b.Property<string>("TenPayRefundNotify")
                        .HasMaxLength(500);

                    b.Property<string>("TenPayWxOpenNotify")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("SystemConfigs");
                });

            modelBuilder.Entity("Yaeher.SystemConfig.SystemToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppSecret")
                        .HasMaxLength(500);

                    b.Property<string>("Appid")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("EffectiveLength");

                    b.Property<DateTime>("EffectiveTime");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<DateTime>("RefreshEffectiveTime")
                        .HasMaxLength(500);

                    b.Property<string>("Refresh_token")
                        .HasMaxLength(500);

                    b.Property<string>("TokenJson");

                    b.Property<string>("TokenType")
                        .HasMaxLength(100);

                    b.Property<string>("YaeherPlatform")
                        .HasMaxLength(100);

                    b.Property<string>("access_token")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("SystemToken");
                });

            modelBuilder.Entity("Yaeher.SystemConfig.WecharSendMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Appid")
                        .HasMaxLength(100);

                    b.Property<string>("BackUrl")
                        .HasMaxLength(500);

                    b.Property<string>("ConsultJson");

                    b.Property<string>("ConsultNumber")
                        .HasMaxLength(30);

                    b.Property<string>("ConsultantName")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<string>("FirstMessage")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Keyword1")
                        .HasMaxLength(500);

                    b.Property<string>("Keyword2")
                        .HasMaxLength(500);

                    b.Property<string>("Keyword3")
                        .HasMaxLength(500);

                    b.Property<string>("MessageRemark")
                        .HasMaxLength(500);

                    b.Property<string>("Miniprogram")
                        .HasMaxLength(100);

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("MsgID")
                        .HasMaxLength(100);

                    b.Property<string>("MsgType")
                        .HasMaxLength(100);

                    b.Property<string>("OperationType")
                        .HasMaxLength(100);

                    b.Property<string>("Pagepath")
                        .HasMaxLength(100);

                    b.Property<string>("Status")
                        .HasMaxLength(500);

                    b.Property<string>("TemplateCode")
                        .HasMaxLength(100);

                    b.Property<string>("TemplateId")
                        .HasMaxLength(100);

                    b.Property<string>("ToUser")
                        .HasMaxLength(100);

                    b.Property<string>("WecharData")
                        .HasMaxLength(5000);

                    b.HasKey("Id");

                    b.ToTable("WecharSendMessage");
                });

            modelBuilder.Entity("Yaeher.SystemConfig.YaeherBanner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BannerImageUrl")
                        .HasMaxLength(500);

                    b.Property<string>("BannerName")
                        .HasMaxLength(100);

                    b.Property<string>("BannerTypeCode")
                        .HasMaxLength(100);

                    b.Property<string>("BannerTypeName")
                        .HasMaxLength(100);

                    b.Property<string>("BannerUrl")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<DateTime>("PlayEndTime");

                    b.Property<DateTime>("PlayStartTime");

                    b.HasKey("Id");

                    b.ToTable("YaeherBanner");
                });

            modelBuilder.Entity("Yaeher.SystemConfig.YaeherConditionalMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppID")
                        .HasMaxLength(100);

                    b.Property<string>("ConditionalName")
                        .HasMaxLength(20);

                    b.Property<string>("ConditionalType")
                        .HasMaxLength(10);

                    b.Property<string>("ConditionalTypeName")
                        .HasMaxLength(100);

                    b.Property<string>("ConditionalUrl")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("MenuID")
                        .HasMaxLength(10);

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("Pagepath")
                        .HasMaxLength(200);

                    b.Property<int>("ParentID");

                    b.Property<string>("RoleCode")
                        .HasMaxLength(20);

                    b.Property<string>("RoleName")
                        .HasMaxLength(10);

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.ToTable("YaeherConditionalMenu");
                });

            modelBuilder.Entity("Yaeher.SystemConfig.YaeherLabelConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("LabelCode")
                        .HasMaxLength(100);

                    b.Property<string>("LabelName")
                        .HasMaxLength(100);

                    b.Property<string>("LabelTypeCode")
                        .HasMaxLength(100);

                    b.Property<string>("LabelTypeName")
                        .HasMaxLength(100);

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<int>("OrderSort");

                    b.Property<int>("ParentId");

                    b.HasKey("Id");

                    b.ToTable("YaeherLabelConfig");
                });

            modelBuilder.Entity("Yaeher.SystemConfig.YaeherMessageTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("Example")
                        .HasMaxLength(2000);

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("TemplateCode")
                        .HasMaxLength(100);

                    b.Property<string>("TemplateId")
                        .HasMaxLength(1000);

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<string>("WecharTitle")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("YaeherMessageTemplate");
                });

            modelBuilder.Entity("Yaeher.SystemConfig.YaeherPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CallCenterNumber")
                        .HasMaxLength(20);

                    b.Property<string>("Callee")
                        .HasMaxLength(20);

                    b.Property<string>("Caller")
                        .HasMaxLength(20);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("StatusCode")
                        .HasMaxLength(2000);

                    b.Property<int>("UserID");

                    b.Property<string>("UserName")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("YaeherPhone");
                });

            modelBuilder.Entity("Yaeher.SystemParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("ItemValue")
                        .HasMaxLength(100);

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("Parameter")
                        .HasMaxLength(100);

                    b.Property<string>("Remark")
                        .HasMaxLength(100);

                    b.Property<string>("SystemCode")
                        .HasMaxLength(50);

                    b.Property<string>("SystemType")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SystemParameter");
                });

            modelBuilder.Entity("Yaeher.YaeherConsultation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Age")
                        .HasMaxLength(20);

                    b.Property<DateTime>("Completetime");

                    b.Property<string>("ConsultNumber")
                        .HasMaxLength(30);

                    b.Property<string>("ConsultState")
                        .HasMaxLength(20);

                    b.Property<string>("ConsultType")
                        .HasMaxLength(20);

                    b.Property<int>("ConsultantID");

                    b.Property<string>("ConsultantJSON");

                    b.Property<string>("ConsultantName")
                        .HasMaxLength(500);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("DoctorID");

                    b.Property<string>("DoctorJSON");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<int>("HasInquiryTimes");

                    b.Property<bool>("HasReply");

                    b.Property<string>("IIInessDescription")
                        .HasMaxLength(6000);

                    b.Property<string>("IIInessJSON");

                    b.Property<string>("IIInessType")
                        .HasMaxLength(20);

                    b.Property<int>("InquiryTimes");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsEvaluate");

                    b.Property<bool>("IsReturnVisit");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<DateTime>("Overtime");

                    b.Property<int>("OvertimeRemindTimes");

                    b.Property<string>("PatientCity")
                        .HasMaxLength(200);

                    b.Property<int>("PatientID");

                    b.Property<string>("PatientJSON");

                    b.Property<string>("PatientName")
                        .HasMaxLength(500);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<int>("RecommendDoctorID");

                    b.Property<string>("RecommendDoctorName")
                        .HasMaxLength(20);

                    b.Property<int>("RefundBy");

                    b.Property<string>("RefundNumber")
                        .HasMaxLength(20);

                    b.Property<string>("RefundReason")
                        .HasMaxLength(1000);

                    b.Property<string>("RefundRemarks")
                        .HasMaxLength(1000);

                    b.Property<string>("RefundState")
                        .HasMaxLength(20);

                    b.Property<DateTime>("RefundTime");

                    b.Property<string>("RefundType")
                        .HasMaxLength(20);

                    b.Property<string>("ReturnVisit")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("ReturnVisitTime");

                    b.Property<int>("ServiceMoneyListId");

                    b.HasKey("Id");

                    b.ToTable("YaeherConsultation");
                });

            modelBuilder.Entity("Yaeher.YaeherDoctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<string>("AuthCheckRemark")
                        .HasMaxLength(200);

                    b.Property<string>("AuthCheckRes")
                        .HasMaxLength(100);

                    b.Property<DateTime>("AuthCheckTime");

                    b.Property<int>("AuthChecker");

                    b.Property<string>("AuthType")
                        .HasMaxLength(20);

                    b.Property<string>("BaseTestRes")
                        .HasMaxLength(100);

                    b.Property<string>("CheckRemark")
                        .HasMaxLength(200);

                    b.Property<string>("CheckRes")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CheckTime");

                    b.Property<int>("Checker");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("Department")
                        .HasMaxLength(20);

                    b.Property<string>("DoctorName")
                        .HasMaxLength(500);

                    b.Property<string>("GraduateSchool")
                        .HasMaxLength(200);

                    b.Property<string>("HospitalName")
                        .HasMaxLength(200);

                    b.Property<string>("IDCard")
                        .HasMaxLength(100);

                    b.Property<bool>("IsAbroad");

                    b.Property<bool>("IsBelieveTCM");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsServiceConscious");

                    b.Property<bool>("IsSharing");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<bool>("ReceiptState");

                    b.Property<int>("Recommender");

                    b.Property<string>("RecommenderName")
                        .HasMaxLength(500);

                    b.Property<string>("Resume")
                        .HasMaxLength(5000);

                    b.Property<bool>("ServiceState");

                    b.Property<string>("SimTestRes")
                        .HasMaxLength(100);

                    b.Property<string>("TestID")
                        .HasMaxLength(20);

                    b.Property<string>("Title")
                        .HasMaxLength(20);

                    b.Property<DateTime>("TsetTime");

                    b.Property<int>("UserID");

                    b.Property<string>("UserImageFile")
                        .HasMaxLength(500);

                    b.Property<string>("WechatNum")
                        .HasMaxLength(100);

                    b.Property<double>("WorkYear");

                    b.HasKey("Id");

                    b.ToTable("YaeherDoctor");
                });

            modelBuilder.Entity("Yaeher.YaeherMessageRemind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<int>("EffectiveLength");

                    b.Property<DateTime>("EffectiveTime");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Message")
                        .HasMaxLength(200);

                    b.Property<string>("MessageType")
                        .HasMaxLength(20);

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<int>("UserID");

                    b.Property<string>("UserName")
                        .HasMaxLength(20);

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("YaeherMessageRemind");
                });

            modelBuilder.Entity("Yaeher.YaeherModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Actionss")
                        .HasMaxLength(20);

                    b.Property<string>("Areas")
                        .HasMaxLength(20);

                    b.Property<string>("Codes")
                        .HasMaxLength(20);

                    b.Property<string>("Controllers")
                        .HasMaxLength(20);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("Description")
                        .HasMaxLength(20);

                    b.Property<bool>("Enabled");

                    b.Property<string>("Icons")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsMenu");

                    b.Property<string>("LinkUrls")
                        .HasMaxLength(100);

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("Names")
                        .HasMaxLength(20);

                    b.Property<int>("OrderSort");

                    b.Property<int>("ParentId");

                    b.HasKey("Id");

                    b.ToTable("YaeherModule");
                });

            modelBuilder.Entity("Yaeher.YaeherOperList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("OperContent");

                    b.Property<string>("OperExplain")
                        .HasMaxLength(2000);

                    b.Property<string>("OperType")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("YaeherOperList");
                });

            modelBuilder.Entity("Yaeher.YaeherRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<bool>("Enabled");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("RoleCode")
                        .HasMaxLength(20);

                    b.Property<string>("RoleName")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("YaeherRole");
                });

            modelBuilder.Entity("Yaeher.YaeherRoleModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<int>("ModuleId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("YaeherRoleModule");
                });

            modelBuilder.Entity("Yaeher.YaeherUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthday");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<bool>("Enabled");

                    b.Property<int>("ErrorCount");

                    b.Property<string>("FullName")
                        .HasMaxLength(500);

                    b.Property<string>("IDCard")
                        .HasMaxLength(20);

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsLabel");

                    b.Property<bool>("IsPay");

                    b.Property<bool>("IsProfitSharing");

                    b.Property<bool>("IsUpdate");

                    b.Property<int>("LoginCount");

                    b.Property<string>("LoginName")
                        .HasMaxLength(500);

                    b.Property<string>("LoginPwd")
                        .HasMaxLength(50);

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("NickName")
                        .HasMaxLength(500);

                    b.Property<string>("OpenID")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<string>("RoleName")
                        .HasMaxLength(50);

                    b.Property<int>("Sex");

                    b.Property<string>("UserImage")
                        .HasMaxLength(500);

                    b.Property<string>("Userorigin")
                        .HasMaxLength(10);

                    b.Property<string>("WeCharUserJson");

                    b.Property<string>("WecharLable")
                        .HasMaxLength(20);

                    b.Property<int>("WecharLableId");

                    b.Property<string>("WecharName")
                        .HasMaxLength(200);

                    b.Property<string>("WecharNo")
                        .HasMaxLength(100);

                    b.Property<string>("WecharOpenID")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("YaeherUser");
                });

            modelBuilder.Entity("Yaeher.YaeherUserPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BandAdd")
                        .HasMaxLength(300);

                    b.Property<string>("BankName")
                        .HasMaxLength(100);

                    b.Property<string>("BankNo")
                        .HasMaxLength(30);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<string>("FullName")
                        .HasMaxLength(500);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<string>("PayMethod")
                        .HasMaxLength(10);

                    b.Property<string>("PayMethodName")
                        .HasMaxLength(20);

                    b.Property<string>("PaymentAccout")
                        .HasMaxLength(50);

                    b.Property<string>("Subbranch")
                        .HasMaxLength(100);

                    b.Property<int>("UserID");

                    b.HasKey("Id");

                    b.ToTable("YaeherUserPayment");
                });

            modelBuilder.Entity("Yaeher.YaeherUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DeleteBy");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("ModifyBy");

                    b.Property<DateTime>("ModifyOn");

                    b.Property<int>("RoleID");

                    b.Property<int>("UserID");

                    b.HasKey("Id");

                    b.ToTable("YaeherUserRole");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");


                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("Yaeher.Authorization.Roles.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("Yaeher.Authorization.Users.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("Yaeher.Authorization.Users.User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("Yaeher.Authorization.Users.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("Yaeher.Authorization.Users.User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("Yaeher.Authorization.Users.User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet")
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange")
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Yaeher.Authorization.Roles.Role", b =>
                {
                    b.HasOne("Yaeher.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Yaeher.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Yaeher.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Yaeher.Authorization.Users.User", b =>
                {
                    b.HasOne("Yaeher.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Yaeher.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Yaeher.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Yaeher.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("Yaeher.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("Yaeher.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("Yaeher.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("Yaeher.Authorization.Roles.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("Yaeher.Authorization.Users.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
